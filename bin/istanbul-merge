#!/usr/bin/env node

'use strict';

var options = require('yargs')
	.string('out')
	.describe('out', 'output path for merged raw coverage report JSON file')
	.normalize('out')
	.require(1, 'at least one path to raw coverage report JSON files is required')
	.string('_')
	.describe('_', 'paths to raw coverage report JSON files to merge')
	.help()
	.usage('Usage: $0 --out path/to/output.json "a/**.json" b/input.json')
	.version()
	.argv;

var fs = require('fs');
var path = require('path');
var async = require('async');
var glob = require('glob');
var istanbul = require('istanbul-lib-coverage');
var mkdirp = require('mkdirp');

globFiles(options._, function (err, files) {
	if (err) throw err;

	mergeFiles(files, function (err, result) {
		if (err) throw err;

		if (options.out && options.out !== '-') {
			var output = path.resolve(options.out);
			mkdirp.sync(path.dirname(output));
			fs.writeFileSync(output, JSON.stringify(result));
		} else {
			console.log(JSON.stringify(result, null, '  '));
		}
	});
});

function globFiles(patterns, callback) {
	async.map(patterns, function (input, callback) {
		glob(input, {
			mark: true,
			nosort: true,
			strict: true
		}, callback);
	}, function(err, fileLists) {
		if (err) {
			return callback(err);
		}

		var files = fileLists.reduce(function (a, b) {
			return a.concat(b);
		}, []);

		callback(null, files);
	});
}

function mergeFiles(files, callback) {
	var map = istanbul.createCoverageMap({});
	async.mapSeries(files, function (file, callback) {
		var json = fs.readFile(file, function (err, json) {
			if (err) {
				return callback(err);
			}

			map.merge(JSON.parse(json));
			callback(null);
		});
	}, function(err) {
		if (err) {
			return callback(err);
		}

		callback(null, map);
	});
}
